const { sequelize } = require('./config/database');

async function migrateDocumentsTable() {
  try {
    console.log('üîÑ Migration de la table Documents...');

    // Ajouter les colonnes manquantes
    await sequelize.query(`
      ALTER TABLE "Documents" 
      ADD COLUMN IF NOT EXISTS "supplierId" UUID,
      ADD COLUMN IF NOT EXISTS "clientId" UUID,
      ADD COLUMN IF NOT EXISTS "userId" UUID;
    `);

    console.log('‚úÖ Colonnes supplierId, clientId, userId ajout√©es');

    // Ajouter les contraintes de cl√©s √©trang√®res
    await sequelize.query(`
      ALTER TABLE "Documents" 
      ADD CONSTRAINT IF NOT EXISTS "fk_documents_supplier" 
      FOREIGN KEY ("supplierId") REFERENCES "Suppliers"(id) ON DELETE SET NULL;
    `);

    await sequelize.query(`
      ALTER TABLE "Documents" 
      ADD CONSTRAINT IF NOT EXISTS "fk_documents_client" 
      FOREIGN KEY ("clientId") REFERENCES "Clients"(id) ON DELETE SET NULL;
    `);

    await sequelize.query(`
      ALTER TABLE "Documents" 
      ADD CONSTRAINT IF NOT EXISTS "fk_documents_user" 
      FOREIGN KEY ("userId") REFERENCES "Users"(id) ON DELETE SET NULL;
    `);

    console.log('‚úÖ Contraintes de cl√©s √©trang√®res ajout√©es');

    // Cr√©er les index
    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS "idx_documents_supplier" ON "Documents"("supplierId");
      CREATE INDEX IF NOT EXISTS "idx_documents_client" ON "Documents"("clientId");
      CREATE INDEX IF NOT EXISTS "idx_documents_user" ON "Documents"("userId");
    `);

    console.log('‚úÖ Index de performance cr√©√©s');

    console.log('üéâ Migration termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  } finally {
    await sequelize.close();
  }
}

// Lancer la migration
migrateDocumentsTable();
